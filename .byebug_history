exit
flash
exit
flash
exit
next
exit
flash
flashes
exit
flash
controller.flashes
exit
user
assigns(:user).persisted?
assigns(:user)
exit
assigns(:user).persisted?
assigns(:user)
exit
@user
user
assigns(:user)
next
assigns(:user)
@user
user
exit
response.body
response.code
rsponce.code
next
response.code
response.body
response
responce
@user
sign_in_and_redirect @user
@user
exit
@user
exit
user
exit
attributes_for_list(:billing_address, 1)
attributes_for_list(:billing_address, 4, title: '12512')
attributes_for_list(:aaa, 4, title: '12512')
attributes_for_list(:shipping_address)
attributes_for_list(:as => 5, :bd => 12)
exit
attributes_for(:shipping_address)
step_params[:order][:shipping_address_attributes]
step_params[:order]
step_params
exit
put :update, step_params
step_params[:order]
step_params
exit
attributes_for(:shipping_address)
attributes_for(:order)
exit
index
next
index
next
[:billing, :delivery, :payment][2]
index
step
next
index
next
index
step
steps[index]
steps
index
next
index
exit
steps
exit
steps
exit
steps
exit
user.errors.nil?
user.errors
user
exit
response.body
next
exit
response.headers
response.status
next
response.to_a
response.body
response
exit
next
request.to_a
request
response.body
response
exit
user.orders
user
order
q
order.queue
order.in_queue?
q
user.billing_address
user.shipping_address
user
exit
ord.in_progress?
ord.in_queue?
ord.in_queue
ord
q
order
q
order.aasm_state
order.state
order
q
next
q
order.build_billing_address.attributes.except("id")
order.build_billing_address.attributes.except(:id)
order.build_billing_address.attributes
order.build_billing_address
order.update(:fasg)
order.update(total_price: 'gdf')
order.update(total_price: 12)
order.update(step_params)
order.update
q
n
next
q
next
exit
y
q
order.valid?
order
next
order
q
order
next
order.build_shipping_address.attributes
order.build_shipping_address
order
q
controller.params
exit
controller.params
params
q
exit
order.build_or_find_billing_address(user)
order.build_or_find_billing_address
order.valid?
order
next
Order.instance_variables
q
instance_variables
next
instance_variables
next
instance_variables
q
previous
back
puts response.to_a
next
